#+OPTIONS: reveal_center:t reveal_control:t reveal_height:-1
#+OPTIONS: reveal_history:nil reveal_keyboard:t reveal_overview:t
#+OPTIONS: reveal_progress:t reveal_rolling_links:nil
#+OPTIONS: reveal_single_file:nil reveal_slide_number:"c"
#+OPTIONS: reveal_title_slide:auto reveal_width:-1
#+REVEAL_MARGIN: -1
#+REVEAL_MIN_SCALE: -1
#+REVEAL_MAX_SCALE: -1
#+REVEAL_ROOT: file:reveal.js-master
#+REVEAL_TRANS: default
#+REVEAL_SPEED: default
#+REVEAL_THEME: moon
#+REVEAL_EXTRA_CSS:
#+REVEAL_EXTRA_JS:
#+REVEAL_HLEVEL: 1
#+REVEAL_TITLE_SLIDE_BACKGROUND:
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE:
#+REVEAL_TITLE_SLIDE_BACKGROUND_POSITION:
#+REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_SIZE:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_POSITION:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_MATHJAX_URL: https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_PREAMBLE:
#+REVEAL_HEAD_PREAMBLE:
#+REVEAL_POSTAMBLE:
#+REVEAL_MULTIPLEX_ID:
#+REVEAL_MULTIPLEX_SECRET:
#+REVEAL_MULTIPLEX_URL:
#+REVEAL_MULTIPLEX_SOCKETIO_URL:
#+REVEAL_SLIDE_HEADER: <div><div style="background:url('../images/micron_logo.svg');position: absolute;top: 0px;left: 0px;width: 100px;height: 79px;"></div>Meet Elm; Marco P. V. Vezzoli</div>
#+REVEAL_SLIDE_FOOTER: 
#+REVEAL_PLUGINS:
#+REVEAL_DEFAULT_FRAG_STYLE:
#+REVEAL_INIT_SCRIPT:
#+REVEAL_HIGHLIGHT_CSS: %r/lib/css/zenburn.css
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:t f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:nil todo:t |:t
#+TITLE: Meet Elm
#+DATE: <2017-10-01 Sun>
#+AUTHOR: Marco Paolo Valerio Vezzoli
#+EMAIL: mvezzoli@micron.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 9.1.1)
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \mode<beamer>{\usetheme{Madrid}}
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [smaller]
#+BEAMER_FRAME_LEVEL: 3
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
* Hello World
** Simplest Program
let's begin with the most easy program
#+BEGIN_src elm
main = div [] [text "Hello World"]
#+END_SRC
when we save it the formatter changes a little the spaces: it is useful for
- reading consistently stuff
- verify trivial sintax errors (as it parse the code in order to
  format it)
The formatter nicely integrates all programmer' editors (no notepad)
*** Import and Export
It also added a new line with the module declaration: we change it a little
#+BEGIN_src elm
module Hello exposing (..)
#+END_SRC
now let's add some import that define the html functions
#+BEGIN_src elm
import Html exposing (div, text, h1)
#+END_SRC
** Install Packages
Before compiling we need to install some packages: you can find a
complete list at http://package.elm-lang.org
#+BEGIN_SRC sh
elm-package install elm-lang/html
#+END_SRC
this will install the html package and its dependencies

elm creates a file =elm-package.json= with all ours specifications and
a directory =elm-stuff= where all packages will be downloaded
** Compile
To compile the package we can use
#+BEGIN_SRC sh
elm-make Hello.elm --output index.html
#+END_SRC
this will create an html file with the compiled program
** Add Types
We can add some warning to the compiler
#+BEGIN_SRC sh
elm-make --warn Hello.elm --output index.html
#+END_SRC
this gives us a hint about the type of our value: we can write a type
declaration like this
#+BEGIN_src elm
main : Html.Html Never
#+END_SRC
immediately before the code

Never is a type with no values: this means that our HTML is not dynamic
** Generate Json Lib
We can also generate a json library which can help us integrating with
other HTML
#+BEGIN_src elm
elm-make --warn Hello.elm --output main.js
#+END_SRC
we just need to add this in the body
#+BEGIN_SRC html
  <body>
    <H1>This is the external HTML<H1>
    <script type="text/javascript" src="main.js"></script>
    <div id="main"></div>
    <script type="text/javascript">
      var d = document.getElementById('main');
      Elm.Hello.embed(d);
    </script>
  </body>
#+END_SRC
** Takeaways
- Compiler infer types
  - this helps us a lot in debugging and development
  - a lot of effort has been put since the beginning to get useful
    error messages
  - the language support parametric polymorphism
- Semantic packaging and modules
  - modules are the mean to provide encapsulation
  - published module are enforced to change major version if the
    exposed signatures change
  - this means that module upgrades don't hurt
* Simple Form
** Elm Architecture: A Simple Form
From version 0.17 of Elm, the previous language has been greatly
simplified removing the whole "reactive" infrastructure for a less
general but clearer pattern

We start this journey with two buttons which can increase or decrease
an integer value
*** The Main Function
the main function accepts a record containing 4 functions: we will go
through each one
#+BEGIN_src elm
main : Program Never Model Msg
main =
    Html.program
        { init = init
        , subscriptions = subscriptions
        , update = update
        , view = view
        }
#+END_SRC
The type means: this is a =Program= that has no startup input and an
inner state of type =Model= which is modified by event of type =Msg=
*** The Model
this type represents the state of the application
#+BEGIN_src elm
type alias Model = Int
#+END_SRC
Alias are useful to read the code and the error messages

We start simple this time, but we will refactor later
*** The Init
we need to set up the initial state at the beginning of the application
#+BEGIN_src elm
init : ( Model, Cmd Msg )
init = ( 0, Cmd.none )
#+END_SRC
init returns a pair whose first element is the status and the second
is an "effect" value or a command to execute something (e.g. send a message to a server).

We start with 0 and no effect.

Cmd is a PARAMETRIC type which accepts another type as parameter
*** Messages
this data type should represent the asynchronous signals coming from
the application
#+BEGIN_src elm 
type Msg = Increment | Decrement
#+END_SRC
this is called a UNION type; in this case it has exactly 2 values
*** Update
this function will change the state of the application according to
signals
#+BEGIN_src elm 
update : Msg -> Model -> ( Model, Cmd Msg )
update message model = 
    case message of
        Increase ->
            ( model + 1, Cmd.none )

        Decrease ->
            ( model - 1, Cmd.none )
#+END_SRC
the type tells that this function expect the event as first input, the
old status as second and gives out the modified status paired with a
command (or "effect")
*** View
this function shows the page starting from the model
#+BEGIN_src elm
view : Model -> Html Msg
view model =
    div []
        [ button [ onClick Increase ] [ text "Add 1" ]
        , div [] [ text <| "Buy " ++ (toString model) ++ " bananas" ]
        , button [ onClick Decrease ] [ text "Remove 1" ]
        ]
#+END_SRC
*** update Index.html
a little change is needed in the html call to find the module
#+BEGIN_SRC html
    <script type="text/javascript">
      var d = document.getElementById('main');
      Elm.Form.embed(d);
    </script>
#+END_SRC
** Extending The Form
we will now add to the view a password field and its confirmation; we
want to be able to signal to the users the quality of the password
(weak, strong) and if both fields match
*** Adding more Widgets
First we add the password fields in the view and add an event to detect change
#+BEGIN_src elm
      div  []
        [ div []
            [ label [ for "pass1" ] [ text "type your password" ]
            , input [ id "pass1"
                , onInput UpdatePass1
                , type_ "password"
                , value model.pass1
                ]
                []
            ]
        , -- some thing for pass2
        ]
#+END_SRC
*** Adding more Messages
the two messages are added to the union type to take into account each
chenge in the textfields
#+BEGIN_src elm
type Msg
    = Increase
    | Decrease
    | UpdatePass1 String
    | UpdatePass2 String
#+END_SRC
the new messages now carry a value of type string
*** Extending the State
In order to store the new information we tranform the state into a
record
#+BEGIN_src elm
type alias Model =
    { counter : Int
    , pass1 : String
    , pass2 : String
    }

init : ( Model, Cmd Msg )
init =
    ( { counter = 1
      , pass1 = ""
      , pass2 = ""
      }
    , Cmd.none
    )
#+END_SRC
*** Extending the Update
If we try to compile it now we get an error about the case switch not
to be complete; we can add two cases; this demosntrates also type
matching and decomposition
#+BEGIN_src elm
        UpdatePass1 value ->
                ( { model
                    | pass1 = value
                  }
                , Cmd.none
                )

        UpdatePass2 value ->
                ( { model
                    | pass2 = value
                  }
                , Cmd.none
                )

#+END_SRC
*** Adding Password Matching and Security: the Model
We want to feedback the user about the level of security; we can
capture this in a type
#+BEGIN_src elm 
type PassSecurity
    = Weak
    | Minimal
    | Good
#+END_SRC
and put into our model
#+BEGIN_src elm
type alias Model =
    { counter : Int
    , pass1 : String
    , pass2 : String
    , passMatching : Bool
    , passSecurity : PassSecurity
    }
#+END_SRC
*** Extending the code setup
in our init code we add initial values
#+BEGIN_src elm
      , pass2 = ""
      , passMatching = False
      , passSecurity = Weak
      }
#+END_SRC
*** Completing the view : security level
now we can show the value
#+BEGIN_SRC elm
        , div []
            [ label [ for "pass1" ] [ text "type your password" ]
            , input
                [ id "pass1"
                , onInput UpdatePass1
                , type_ "password"
                , value model.pass1
                ]
                []
            , text <| "Security " ++ (toString model.passSecurity)
            ]
        , hr [] []
#+END_SRC
*** Completing the view: password matching
we also show a colored status for pattern matching
#+BEGIN_SRC elm
        , div []
            [ label [ for "pass2" ] [ text "retype your password" ]
            , input
                [ id "pass2"
                , onInput UpdatePass2
                , type_ "password"
                , value model.pass2
                ]
                []
            , let
                ( message, color ) =
                    if model.passMatching then
                        ( "Matching", "green" )
                    else
                        ( "Not Matching", "red" )
              in
                div [ style [ ( "color", color ) ] ] [ text message ]
            ]
#+END_SRC
*** Completing the update: security logic
as an example we may decide that security is given by length alone
#+BEGIN_SRC elm
        UpdatePass1 value ->
            let
                passLength =
                    String.length value

                security =
                    if passLength < 4 then
                        Weak
                    else
                        (if passLength < 6 then
                            Minimal
                         else
                            Good
                        )
            in
                ( { model | pass1 = value, passSecurity = security }, Cmd.none )
#+END_SRC
*** Completing the update: password matching
We also can add a comparison between passwords
#+BEGIN_SRC elm
        UpdatePass2 value ->
            let
                match =
                    value == model.pass1
            in
                ( { model
                    | pass2 = value
                    , passMatching = match
                  }
                , Cmd.none
                )
#+END_SRC
this check must be added on the other case in order to make everything correct
** Debugger
Elm code does not have a lot of problems that you can meet in common
javascript; but this is not enough: we want the program to work as it
was intended. This may be due to an incorrect logic.

You can check unintended behaviours using the debugger; it is also fun
to see how the program actually works.
*** Compiling with debugger option
You can compile the form with the =--debug= option
#+BEGIN_SRC sh
elm-make Form.elm --warn --debug --output main.js
#+END_SRC
this is useful in development: production code should not be compiled
in this way

In the page now a new control appears which counts every event recorded
*** Time Travelling
through the debugging interface it is possible to:
- move to any recorded event and see the internal state while the GUI updates
- load and save all events list: this is great to report problems and
  reproduce each step
** Takeaways
- The Type System support refactoring
- The Purity support debug
* Clock
** Elm Architecture (Again): Getting The Time
In this example we are creating a simple clock in elm
*** Subscriptions
Elm handles those asynchronous events which are not related to the UI
with subscriptions

A typical example would be server answers to http request; getting the
time is another.
#+BEGIN_SRC elm
subscriptions : Model -> Sub Msg
subscriptions model =
    Time.every (1 * Time.second) Tick
#+END_SRC

*** Model and Init
Let's start modelling the status to be the seconds of the current
minute
#+BEGIN_SRC elm
type alias Model =
    Int

init : ( Model, Cmd Msg )
init =
    ( 1, Cmd.none )
#+END_SRC
*** SVN
we use SVN to draw the clock
#+BEGIN_SRC elm
import Svg exposing (svg, circle, line)
import Svg.Attributes exposing ( --many things here

#+END_SRC
** Takeaways
- Asynchronous events are all created equal
  - Dynamic DOM Update
  - Effects are accessible: type system aids checking
* Hand
** Asynchronous Events (Again): The Mouse
** Transform events into types
** Takeaways
- Asynchronous events are all created equal (Again)
- Games anyone?
* All Together
** Import and Export
** Model
** Init
** Update
** Subscriptions
** Takeaways
- The Elm architecture is scalable
- There is more behind Map than your eyes see now
  
